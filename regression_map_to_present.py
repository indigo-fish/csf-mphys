""" Script to read in the Marshall SAM index and calculate the associated geopotential height pattern
via linear regression analysis.

Plots this using two different maps (usually only one is necessary)"""

import matplotlib.pyplot as plt
from matplotlib import gridspec
import numpy as np
import cartopy.crs as ccrs
import os, sys

Code_dir = '/home/w/wadh5699/Desktop/Example_Scripts/Amelia_example_scripts/'
Figure_dir = Code_dir + 'Figures/' # directory to save figures to

sys.path.append(Code_dir)
import plotting_functions
import reading_in_data_functions
import analysis_functions
import calculate_csf_SAM

def get_corr(season, dataset='Marshall', compare_SEAS5=True):
    
    variable = 'tos'
    # read in the SAM index
    if dataset == 'Marshall':
        SAM_idx, years_SAM = reading_in_data_functions.read_Marshall_SAM_idx(season=season)
    else: SAM_idx, years_SAM, calendar, units = calculate_csf_SAM.read_SAM_indices(dataset=dataset, season=season)
    
    # Read in SSTs
    if dataset=='Marshall' or dataset=='ASF-20C': #ASF-20C has imposed SSTs
        file_str_ERA5 = '/network/group/aopp/met_data/MET001_ERA5/data/' + variable + '/mon/' + variable + '_mon_ERA5_2.5x2.5_195001-197812.nc'
        var,lats,lons,levs,times,calendar,t_units = reading_in_data_functions.read_in_variable(file_str_ERA5, variable)
        file_str_ERA5_2 = '/network/group/aopp/met_data/MET001_ERA5/data/' + variable + '/mon/' + variable + '_mon_ERA5_2.5x2.5_197901-202012.nc'
        var2,_,_,_,times2,_,_ = reading_in_data_functions.read_in_variable(file_str_ERA5_2,variable) #ERA SSTs are stored in 2 files which must be concatenated
        var = np.append(var,var2,axis=0)
        times = np.append(times,times2)
        var_am, years_var = reading_in_data_functions.calculate_annual_mean(var, times, calendar, t_units, season=season)
    elif dataset=='CSF-20C':
        dataset_file = '/home/p/pattersonm/sst_ecmf-guh4_1101_fcmean_sfc_1901_2010_' + season + '_remapped.nc' #CSF mean data was generated by Matt using CDO
        var, lats, lons, levs, times, calendar, t_units = reading_in_data_functions.read_in_variable(dataset_file, 'sst')
        var_am = var
        years_var = np.arange(1901, 2010+1)
        years_var += 1
    elif dataset=='SEAS5':
        dataset_file = '/network/aopp/hera/mad/patterson/MPhys/SEAS5_ensemble_means/SEAS5_sst_ensemble_mean_25members_' + season + '_init_November_1982_2017.nc'
        var, lats, lons, levs, times, calendar, t_units = reading_in_data_functions.read_in_variable(dataset_file, 'sst')
        var_am = var
        years_var = np.arange(1982, 2017+1)
    
    # calculate the seasonal mean geopotential height
    #var_am, years_var = reading_in_data_functions.calculate_annual_mean(var,times,calendar,t_units,season=season)
    if (dataset=='CSF-20C' or dataset=='ASF-20C') and season=='DJF': years_SAM += 1 #since DJF uses parts of 2 calendar years, disagreement over which year to use
    if compare_SEAS5:
        start_year, end_year = 1982,2010
    else:
        start_year, end_year = 1958, 1986
    
    # restrict geopotential height and SAM index to chosen years
    year_mask_var = (years_var>=start_year)&(years_var<=end_year)
    var_am = var_am[year_mask_var,:,:]
    year_mask_SAM = (years_SAM>=start_year)&(years_SAM<=end_year)
    SAM_idx = SAM_idx[year_mask_SAM]
    
    # calculate regression pattern
    regress_coeff,corr,pvals = analysis_functions.regress_map(SAM_idx,var_am)
    
    return regress_coeff, corr, pvals, lons, lats

def make_all_maps(season='DJF', compare_SEAS5=True):
    variable = 'tos'
    #gets regression values for all relevant SAM/SSTs, and plots them on adjacent graphs
    if compare_SEAS5:
        datasets = ['Marshall', 'CSF-20C', 'ASF-20C', 'SEAS5']
        start_year, end_year = 1982, 2010
    else:
        datasets = ['Marshall', 'CSF-20C', 'ASF-20C']
        start_year, end_year = 1958, 1986
    
    # make some plots
    plt.figure(figsize=(15,15))
    height_ratios = []
    for dataset in datasets:
        height_ratios.append(10)
    height_ratios.append(0.5)
    gs = gridspec.GridSpec(len(datasets) + 1,1,height_ratios=height_ratios)
    
    clevs = np.arange(-.75, .8, .1)
    projection = ccrs.PlateCarree(central_longitude=0.)
    for i, dataset in enumerate(datasets):
        regress_coeff, corr, pvals, lons, lats = get_corr(season, dataset=dataset, compare_SEAS5=compare_SEAS5)
        ax = plt.subplot(gs[i,0],projection=projection)
        cs = plotting_functions.plot_filled_contours(regress_coeff,lons,lats,clevs,ax,title='')
        plotting_functions.add_significance(pvals,lons,lats,clevs=np.array([0,0.05]))  # plot hatching to show where p values are less than 0.05, i.e. stat significant
        ax.text(-0.1,1, dataset, transform=ax.transAxes,fontsize=20, va='top', ha='right')
        if i == 0:
            title_str = 'Regression of ' + season + ' SAM onto SSTS: ' + str(start_year) + '-' + str(end_year)
            plt.title(title_str,fontsize=30)
        if i < len(datasets) - 1: plotting_functions.add_latlon_labels(ax,xticks=[],yticks=np.arange(-80,81,20),fontsize=15) # add latitude longitude labels
        else: plotting_functions.add_latlon_labels(ax,xticks=np.arange(-180,181,60),yticks=np.arange(-80,81,20),fontsize=15) # add latitude longitude labels
        ax.set_extent([-180,179,-90,20],crs=ccrs.PlateCarree())
    
    # colour bar
    ax = plt.subplot(gs[len(datasets),:])
    plotting_functions.colorbar(ax,cs)
    
    #plt.subplots_adjust(hspace=0.1,wspace=0.1) # force subplots to be close together
    
    # save figure
    figure_name = Figure_dir + 'Final_SAM_pattern_' + variable + '_' + str(start_year) + '-' + str(end_year) + '_' + season + '.png'
    print('saving to %s' % (figure_name))
    plt.savefig(figure_name,bbox_inches='tight')
    plt.show()


def runregression(season, dataset='Marshall', compare_SEAS5=True):
    
    variable = 'tos'
    # read in the SAM index
    if dataset == 'Marshall':
        SAM_idx, years_SAM = reading_in_data_functions.read_Marshall_SAM_idx(season=season)
    else: SAM_idx, years_SAM, calendar, units = calculate_csf_SAM.read_SAM_indices(dataset=dataset, season=season)
    
    # Read in SSTs
    if dataset=='Marshall' or dataset=='ASF-20C': #ASF-20C has imposed SSTs
        file_str_ERA5 = '/network/group/aopp/met_data/MET001_ERA5/data/' + variable + '/mon/' + variable + '_mon_ERA5_2.5x2.5_195001-197812.nc'
        var,lats,lons,levs,times,calendar,t_units = reading_in_data_functions.read_in_variable(file_str_ERA5, variable)
        file_str_ERA5_2 = '/network/group/aopp/met_data/MET001_ERA5/data/' + variable + '/mon/' + variable + '_mon_ERA5_2.5x2.5_197901-202012.nc'
        var2,_,_,_,times2,_,_ = reading_in_data_functions.read_in_variable(file_str_ERA5_2,variable) #ERA SSTs are stored in 2 files which must be concatenated
        var = np.append(var,var2,axis=0)
        times = np.append(times,times2)
        var_am, years_var = reading_in_data_functions.calculate_annual_mean(var, times, calendar, t_units, season=season)
    elif dataset=='CSF-20C':
        dataset_file = '/home/p/pattersonm/sst_ecmf-guh4_1101_fcmean_sfc_1901_2010_' + season + '_remapped.nc' #CSF mean data was generated by Matt using CDO
        var, lats, lons, levs, times, calendar, t_units = reading_in_data_functions.read_in_variable(dataset_file, 'sst')
        var_am = var
        years_var = np.arange(1901, 2010+1)
        years_var += 1
    elif dataset=='SEAS5':
        dataset_file = '/network/aopp/hera/mad/patterson/MPhys/SEAS5_ensemble_means/SEAS5_sst_ensemble_mean_25members_' + season + '_init_November_1982_2017.nc'
        var, lats, lons, levs, times, calendar, t_units = reading_in_data_functions.read_in_variable(dataset_file, 'sst')
        var_am = var
        years_var = np.arange(1982, 2017+1)
    
    # calculate the seasonal mean geopotential height
    #var_am, years_var = reading_in_data_functions.calculate_annual_mean(var,times,calendar,t_units,season=season)
    if (dataset=='CSF-20C' or dataset=='ASF-20C') and season=='DJF': years_SAM += 1 #since DJF uses parts of 2 calendar years, disagreement over which year to use
    if compare_SEAS5:
        start_year, end_year = 1982,2010
    else:
        start_year, end_year = 1958, 1986
    
    # restrict geopotential height and SAM index to chosen years
    year_mask_var = (years_var>=start_year)&(years_var<=end_year)
    var_am = var_am[year_mask_var,:,:]
    year_mask_SAM = (years_SAM>=start_year)&(years_SAM<=end_year)
    SAM_idx = SAM_idx[year_mask_SAM]
    
    # calculate regression pattern
    regress_coeff,corr,pvals = analysis_functions.regress_map(SAM_idx,var_am)
    
    # make some plots
    plt.figure(figsize=(15,15))
    gs = gridspec.GridSpec(2,1,height_ratios=[10,0.5])
    
    clevs = np.array([-.75, -.65, -.55, -.45, -.35, -.25, -.15, -.05, .05, .15, .25, .35, .45, .55, .65, .75])
    #clevs = np.arange(-.55, .55, .1)
    #clevs = np.append(-a[::-1],a) # contour level
    
    for i, projection in enumerate([ccrs.PlateCarree(central_longitude=0.) ]):
    #for i, projection in enumerate([ccrs.PlateCarree(central_longitude=0.),ccrs.Orthographic(central_longitude=0.0, central_latitude=-90.0) ]):
    
        ax = plt.subplot(gs[i,0],projection=projection)
        cs = plotting_functions.plot_filled_contours(regress_coeff,lons,lats,clevs,ax,title='')
        plotting_functions.add_significance(pvals,lons,lats,clevs=np.array([0,0.05]))  # plot hatching to show where p values are less than 0.05, i.e. stat significant
        #ax.text(-0.05,1, subplot_labels[i], transform=ax.transAxes,fontsize=25, va='top', ha='right')
        if i == 0:
            title_str = 'Regression of ' + season + ' ' +  dataset + ' SAM onto SSTs: ' + str(start_year) + '-' + str(end_year)
            plt.title(title_str,fontsize=30)
            plotting_functions.add_latlon_labels(ax,xticks=np.arange(-180,181,60),yticks=np.arange(-80,81,20)) # add latitude longitude labels
        ax.set_extent([-180,179,-90,20],crs=ccrs.PlateCarree())
    
    # colour bar
    #ax = plt.subplot(gs[2,:])
    ax = plt.subplot(gs[1,:])
    plotting_functions.colorbar(ax,cs)
    
    plt.subplots_adjust(hspace=0.1,wspace=0.1) # force subplots to be close together
    
    # save figure
    figure_name = Figure_dir + 'Final_SAM_pattern_' + variable + '_' + dataset + '_' + str(start_year) + '-' + str(end_year) + '_' + season + '.png'
    print('saving to %s' % (figure_name))
    plt.savefig(figure_name,bbox_inches='tight')
    plt.show()

"""
seasons = ['DJF']
datasets = ['Marshall', 'CSF-20C', 'ASF-20C', 'SEAS5']
for season in seasons:
    for dataset in datasets:
        runregression(season, dataset=dataset)
        if dataset != 'SEAS5': runregression(season, dataset=dataset, compare_SEAS5=False)
"""

make_all_maps('DJF')
make_all_maps('DJF', compare_SEAS5=False)
