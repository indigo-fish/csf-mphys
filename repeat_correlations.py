import numpy as np
from scipy.stats import linregress
import os,sys
import matplotlib.pyplot as plt
from matplotlib import gridspec
import cartopy.crs as ccrs

Code_dir = '/home/w/wadh5699/Desktop/Example_Scripts/Amelia_example_scripts/'
sys.path.append(Code_dir)
import plotting_functions
import reading_in_data_functions
from interpolate_grid2 import interpolate_grid
from cal_grid_point_correlations import cal_grid_point_correlations

Data_dir = Code_dir + 'Data/'
Figure_dir = Code_dir + 'Figures/'

def make_corr_map(dataset, season, variable='sst', compare_SEAS5=True):
	print(dataset + ' ' + season)
	print(compare_SEAS5)
	#read in both maps
	if variable=='sst' or variable=='tos':
		if dataset=='CSF-20C':
			dataset_file = '/home/p/pattersonm/sst_ecmf-guh4_1101_fcmean_sfc_1901_2010_' + season  + '_remapped.nc' #CSF mean data was generated by Matt using CDO
		elif dataset=='SEAS5':
			dataset_file = '/network/aopp/hera/mad/patterson/MPhys/SEAS5_ensemble_means/SEAS5_sst_ensemble_mean_25members_' + season + '_init_November_1982_2017.nc'
		elif dataset=='CERA-20C':
			dataset_file = '/home/p/pattersonm/CERA20Cmonthly_SST_1900_2010_ensmean.nc'
		ds_var, ds_lats, ds_lons, ds_levs, ds_times, ds_calendar, ds_t_units = reading_in_data_functions.read_in_variable(dataset_file, 'sst')
		era_file = '/network/group/aopp/met_data/MET001_ERA5/data/tos/mon/tos_mon_ERA5_1x1_195001-197812.nc' #ERA5 data is stored in 2 separate files
		era_var, era_lats, era_lons, era_levs, era_times, era_calendar, era_t_units = reading_in_data_functions.read_in_variable(era_file, 'tos')
		era_file2 = '/network/group/aopp/met_data/MET001_ERA5/data/tos/mon/tos_mon_ERA5_1x1_197901-202012.nc'
		era_var2, era_lats2, era_lons2, era_levs2, era_times2,_,_= reading_in_data_functions.read_in_variable(era_file2, 'tos')
		ds_var[np.abs(ds_var)>1e3] = np.nan
		era_var[np.abs(era_var)>1e3] = np.nan
		era_var2[np.abs(era_var2)>1e3] = np.nan
	
	elif variable=='slp' or variable=='mslp' or variable=='psl':
		if dataset=='CSF-20C':
			dataset_file = '/home/p/pattersonm/msl_ecmf-guh4_1101_fcmean_sfc_1901_2010_' + season  + '.nc'
		elif dataset=='SEAS5':
			dataset_file = '/network/aopp/hera/mad/patterson/MPhys/SEAS5_ensemble_means/SEAS5_msl_ensemble_mean_25members_' + season + '_init_November_1982_2017.nc'
		elif dataset=='CERA-20C':
			dataset_file = '/home/p/pattersonm/CERA20Cmonthly_SLP_1900_2010_ensmean.nc'
		ds_var, ds_lats, ds_lons, ds_levs, ds_times, ds_calendar, ds_t_units = reading_in_data_functions.read_in_variable(dataset_file, 'msl')
		era_file = '/network/group/aopp/met_data/MET001_ERA5/data/psl/mon/psl_mon_ERA5_1x1_195001-197812.nc' #ERA5 data is stored in 2 separate files
		era_var, era_lats, era_lons, era_levs, era_times, era_calendar, era_t_units = reading_in_data_functions.read_in_variable(era_file, 'psl')
		era_file2 = '/network/group/aopp/met_data/MET001_ERA5/data/psl/mon/psl_mon_ERA5_1x1_197901-202012.nc'
		era_var2,_,_,_,era_times2,_,_= reading_in_data_functions.read_in_variable(era_file2, 'psl')
	
	elif variable=='zg' or variable=='geopotential height':
		if dataset=='CSF-20C':
			dataset_file = '/home/p/pattersonm/Z500monthly_CSF-20C_1901-2010_1101_' + season + '.nc'
		elif dataset=='ASF-20C':
			dataset_file = '/home/p/pattersonm/Z500monthly_ASF-20C_1901-2010_1101_' + season + '.nc'
		ds_var, ds_lats, ds_lons, ds_levs, ds_times, ds_calendar, ds_t_units = reading_in_data_functions.read_in_variable(dataset_file, 'Z_GDS0_ISBL', lat_name='g0_lat_1', lon_name='g0_lon_2', time_name='forecast_time0')
		ds_t_units = 'hours since 1901-11-1 00:00:00'
		era_file = '/network/group/aopp/met_data/MET001_ERA5/data/zg/mon/zg_mon_ERA5_0.5x0.5_195001-197812.nc'
		era_var, era_lats, era_lons, era_levs, era_times, era_calendar, era_t_units = reading_in_data_functions.read_in_variable(era_file, 'geopotential_height', chosen_level=500)
		era_file2 = '/network/group/aopp/met_data/MET001_ERA5/data/zg/mon/zg_mon_ERA5_0.5x0.5_197901-202012.nc'
		era_var2,_,_,_,era_times2,_,_ = reading_in_data_functions.read_in_variable(era_file2, 'zg', chosen_level=500)
	
	era_var = np.append(era_var, era_var2,axis=0) #2 separate ERA files are concatenated
	era_times = np.append(era_times,era_times2)
	
	#converts monthly ERA data to seasonal, and numerical times to years in both datasets
	#if variable=='sst' or variable=='tos' or variable=='slp' or variable=='mslp' or variable=='psl':
	#	ds_var, ds_years = reading_in_data_functions.calculate_annual_mean(ds_var, ds_times, ds_calendar, ds_t_units, season=season)
	#elif variable=='zg' or variable=='geopotential height':
	#	ds_years = np.arange(1901,2010+1)
	if dataset=='CSF-20C' or dataset=='ASF-20C':
		ds_years = np.arange(1901, 2010+1)
	elif dataset=='SEAS5':
		ds_years = np.arange(1982, 2017+1)
	elif dataset=='CERA-20C':
		ds_var, ds_years = reading_in_data_functions.calculate_annual_mean(ds_var, ds_times, ds_calendar, ds_t_units, season=season)
	if (dataset=='CSF-20C' or dataset=='ASF-20C') and season=='DJF': ds_years += 1
	era_var, era_years = reading_in_data_functions.calculate_annual_mean(era_var, era_times, era_calendar, era_t_units, season=season)
	
	#truncates both datasets to desired years
	if compare_SEAS5: start_year, end_year = 1982, 2010
	else: start_year, end_year = 1958, 1986

	year_mask_ds = (ds_years >= start_year)&(ds_years <= end_year)
	ds_am = ds_var[year_mask_ds,:,:]
	year_mask_era = (era_years >= start_year)&(era_years <= end_year)
	era_am = era_var[year_mask_era,:,:]
	
	print(np.shape(ds_am))
	print(np.shape(era_am))
	
	#grid size of ERA and CSF is different so need to interpolate
	#something is going wrong with the 3D interpolation so separately interpolating each 2D grid instead
	
	if dataset != 'CSF-20C' or variable != 'sst':
		interpolated_era = []
		for grid in era_am:
			new_grid = interpolate_grid(grid, era_lons, era_lats, ds_lons, ds_lats)
			interpolated_era.append(new_grid)
		interpolated_era = np.array(interpolated_era)
	else:
		interpolated_era = era_am
	
	corrs_map, pvals_map = cal_grid_point_correlations(ds_am, interpolated_era, return_pvals=True)
	
	return corrs_map, pvals_map, ds_lons, ds_lats
	"""
	#make plots
	plt.figure(figsize=(15,15))
	gs = gridspec.GridSpec(2,1,height_ratios=[10,0.5])
	
	clevs = np.arange(-1.05,1.1,0.1)
	
	for i, projection in enumerate([ccrs.PlateCarree(central_longitude=0.) ]):
	#for i, projection in enumerate([ccrs.PlateCarree(central_longitude=0.), ccrs.Orthographic(central_longitude=0.0, central_latitude=-90.0)]):
		
		ax = plt.subplot(gs[i,0], projection=projection)
		cs = plotting_functions.plot_filled_contours(corrs_map, ds_lons, ds_lats, clevs, ax, title='')
		plotting_functions.add_significance(pvals_map, ds_lons, ds_lats, clevs=np.array([0,0.05])) #plot hatching to show where p values are less than 0.05, ie statistically significant
		#ax.text(-0.05,1, subplot_labels[i], transform = ax.transAxes, fontsize=25, va='top', ha='right')
		if i == 0:
			title_str = variable + ' correlation between ' + dataset + ' and ERA5 during ' + season + ': ' + str(start_year) + '-' + str(end_year)
			plt.title(title_str, fontsize=30)
			plotting_functions.add_latlon_labels(ax,xticks=np.arange(-180,181,60),yticks=np.arange(-80,81,20)) #add latitude longitude labels
		ax.set_extent([-180,179,-90,20],crs=ccrs.PlateCarree())
	
	#colour bar
	ax = plt.subplot(gs[1,:])
	plotting_functions.colorbar(ax,cs)
	
	#plt.subplots_adjust(hspace=0.1, wspace=0.1) #force subplots to be close together
	
	#save figure
	figure_name = Figure_dir + variable + '_correlations_' + dataset + '_ERA_' + season + '_' + str(start_year) + '-' + str(end_year)
	figure_name += '.png'
	print('saving to %s' % (figure_name))
	plt.savefig(figure_name, bbox_inches='tight')
	
	#plt.show()
	"""

def plot_all(datasets, season, variable, compare_SEAS5):
	plt.figure(figsize=(15,11))
	height_ratios = []
	for dataset in datasets:
		height_ratios.append(10)
	height_ratios.append(0.5)
	gs = gridspec.GridSpec(len(datasets) + 1, 1, height_ratios=height_ratios)
	
	if compare_SEAS5: start_year, end_year = 1982, 2010
	else: start_year, end_year = 1958, 1986
	
	clevs = np.arange(-1.05,1.1,0.1)
	projection = ccrs.PlateCarree(central_longitude=0.)
	for i, dataset in enumerate(datasets):
		corrs_map, pvals_map, ds_lons, ds_lats = make_corr_map(dataset, season, variable=variable, compare_SEAS5=compare_SEAS5)
		ax = plt.subplot(gs[i,0], projection=projection)
		cs = plotting_functions.plot_filled_contours(corrs_map, ds_lons, ds_lats, clevs, ax, title='')
		plotting_functions.add_significance(pvals_map, ds_lons, ds_lats, clevs=np.array([0,0.05])) #plot hatching to show where p values are less than 0.05, ie statistically significant
		ax.text(-0.07,0.8, dataset, transform = ax.transAxes, fontsize=20, va='top', ha='right')
		if i == 0:
			if variable == 'zg': title_str = '500 hPa Geopotential Height Skill during DJF: ' + str(start_year) + '-' + str(end_year)
			elif variable == 'slp': title_str = 'Surface Pressure Skill during DJF: ' + str(start_year) + '-' + str(end_year)
			else: title_str = variable + ' correlation between Datasets and ERA5 during ' + season + ': ' + str(start_year) + '-' + str(end_year)
			plt.title(title_str, fontsize=30)
		if i < len(datasets) - 1: plotting_functions.add_latlon_labels(ax,xticks=[],yticks=np.arange(-80,81,20), fontsize=15) #add latitude longitude labels
		else: plotting_functions.add_latlon_labels(ax,xticks=np.arange(-180,181,60),yticks=np.arange(-80,81,20), fontsize=15)
		ax.set_extent([-180,179,-90,20],crs=ccrs.PlateCarree())
	
	#colour bar
	ax = plt.subplot(gs[len(datasets),:])
	plotting_functions.colorbar(ax,cs)
	
	plt.subplots_adjust(hspace=0.1, wspace=0.1) #force subplots to be close together
	
	#save figure
	figure_name = Figure_dir + 'Repeat' + variable + '_correlations_ERA_' + season + '_' + str(start_year) + '-' + str(end_year) + '.png'
	print('saving to %s' % (figure_name))
	plt.savefig(figure_name, bbox_inches='tight')
	
"""
array = [True, False]
for arr in array:
	season = 'DJF'
	dataset = 'CERA-20C'
	#make_corr_map(dataset, season, variable='sst', compare_SEAS5=arr)
	make_corr_map(dataset, season, variable='slp', compare_SEAS5=arr)
	
	dataset = 'CSF-20C'
	make_corr_map(dataset, season, variable='sst', compare_SEAS5=arr)
	make_corr_map(dataset, season, variable='slp', compare_SEAS5=arr)
	make_corr_map(dataset, season, variable='zg', compare_SEAS5=arr)
	
	dataset = 'SEAS5'
	make_corr_map(dataset, season, variable='sst')
	make_corr_map(dataset, season, variable='slp')

	dataset = 'ASF-20C'
	make_corr_map(dataset, season, variable='zg', compare_SEAS5=arr)
"""

season='DJF'

datasets = ['CSF-20C', 'ASF-20C']
plot_all(datasets, season, 'zg', True)

datasets = ['CSF-20C', 'SEAS5']
plot_all(datasets, season, 'slp', True)
